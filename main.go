package main

import (
	"bufio"
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net"
	"net/http"
	"os"
	"os/exec"
	"path/filepath"
	"runtime"
	"strconv"
	"strings"
	"time"

	"github.com/oschwald/maxminddb-golang"
)

var (
	fileConfig, fileGames, hostname, ipInfo, trialfile string
	serverID, authToken, mmdbASN, mmdbCity, Session_ID string
	isRunning                                          bool
)

const (
	newTitle    = "Drova Notifier v2"                                  // –ò–º—è –æ–∫–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
	UrlSessions = "https://services.drova.io/session-manager/sessions" // –∏–Ω—Ñ–æ –ø–æ —Å–µ—Å—Å–∏—è–º
	UrlServers  = "https://services.drova.io/server-manager/servers"   // –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ –ø–æ —Å–µ—Ä–≤–µ—Ä–∞–º
)

// –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –∏–≥—Ä —Å –∏—Ö ID
type Product struct {
	ProductID string `json:"productId"`
	Title     string `json:"title"`
}

// –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω –±–∞–∑–µ
type ASNRecord struct {
	AutonomousSystemOrganization string `maxminddb:"autonomous_system_organization"`
}

// –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ —Ä–µ–≥–∏–æ–Ω–∞ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω –±–∞–∑–µ
type CityRecord struct {
	City struct {
		Names map[string]string `maxminddb:"names"`
	} `maxminddb:"city"`
	Subdivision []struct {
		Names map[string]string `maxminddb:"names"`
	} `maxminddb:"subdivisions"`
}

// online –∏–Ω—Ñ–æ –ø–æ IP
type IPInfoResponse struct {
	IP     string `json:"ip"`
	City   string `json:"city"`
	Region string `json:"region"`
	ISP    string `json:"org"`
}

// —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ ID –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
type serverManager []struct {
	Server_id    string `json:"uuid"`
	Name         string `json:"name"`
	User_id      string `json:"user_id"`
	Status       string `json:"state"`
	Public       bool   `json:"published"`
	SessionStart int64  `json:"alive_since"`
}

// –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞ windows
type Win32_OperatingSystem struct {
	LastBootUpTime time.Time
}

func main() {
	logFilePath := "log.log" // –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
	logFilePath = filepath.Join(filepath.Dir(os.Args[0]), logFilePath)
	// –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
	logFile, err := os.OpenFile(logFilePath, os.O_WRONLY|os.O_CREATE|os.O_APPEND, 0644)
	if err != nil {
		log.Println("[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞", err, getLine())
		restart()
	}
	defer logFile.Close()
	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã
	dir, err := filepath.Abs(filepath.Dir(os.Args[0]))
	if err != nil {
		log.Println("[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –¥–µ—Ä–µ–∫—Ç–æ—Ä–∏–∏: ", err, getLine())
		restart()
	}
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤—ã–≤–æ–¥–∞ –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞
	log.SetOutput(logFile)

	// –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ü–ö
	stationName, err := os.Hostname()
	if err != nil {
		log.Println("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: ", err, getLine())
		return
	}
	hostname = stationName

	time.Sleep(20 * time.Second)
	BotToken, Chat_IDint, UserID, ServiceChatID = getConfigBot(hostname)
	if ServiceChatID == 0 {
		ServiceChatID = Chat_IDint
	}

	log.Println("[INFO] Start program")

	fileGames = filepath.Join(dir, "games.txt")
	fileConfig = filepath.Join(dir, "config.txt")
	mmdbASN = filepath.Join(dir, "GeoLite2-ASN.mmdb")   // —Ñ–∞–π–ª –æ—Ñ—Ñ–ª–∞–π–Ω –±–∞–∑—ã IP. –ü—Ä–æ–≤–∞–π–¥–µ—Ä
	mmdbCity = filepath.Join(dir, "GeoLite2-City.mmdb") // —Ñ–∞–π–ª –æ—Ñ—Ñ–ª–∞–π–Ω –±–∞–∑—ã IP. –ì–æ—Ä–æ–¥ –∏ –æ–±–ª–∞—Å—Ç—å

	getConfigFile(fileConfig)

	if TrialON {
		if TrialfileLAN != "" {
			_, err = os.Stat(TrialfileLAN)
			if os.IsNotExist(err) {
				// –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
				log.Printf("[INFO] –§–∞–π–ª %s –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ–º—É\n", TrialfileLAN)
				trialfile = filepath.Join(dir, "trial.txt")
				log.Println("[INFO] –ó–∞–ø–∏—Å—å —Ç—Ä–∏–∞–ª–∞ –≤ ", trialfile)
			} else {
				trialfile = TrialfileLAN
				log.Println("[INFO] –ó–∞–ø–∏—Å—å —Ç—Ä–∏–∞–ª–∞ –≤ ", trialfile)
			}
		} else {
			trialfile = filepath.Join(dir, "trial.txt")
			log.Println("[INFO] –ó–∞–ø–∏—Å—å —Ç—Ä–∏–∞–ª–∞ –≤ ", trialfile)
		}
	} else {
		TrialBlock = false
		TrialfileLAN = ""
	}

	if !OnlineIpInfo {
		_, err = os.Stat(mmdbASN)
		if os.IsNotExist(err) {
			// –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
			OnlineIpInfo = true
			log.Printf("–§–∞–π–ª %s –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. %s. %s\n", fileConfig, err, getLine())
		} else {
			_, err = os.Stat(mmdbCity)
			if os.IsNotExist(err) {
				// –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
				OnlineIpInfo = true
				log.Printf("–§–∞–π–ª %s –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. %s. %s\n", fileConfig, err, getLine())
			} else {
				if !AutoUpdateGeolite { // –µ—Å–ª–∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω –∞–≤—Ç–æ–∞–ø–¥–µ–π—Ç
					go restartGeoLite(mmdbASN, mmdbCity) // –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤ GeoLite
				} else { // –∏–Ω–∞—á–µ
					updateGeoLite(mmdbASN, mmdbCity) // –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è GeoLite
				}
			}
		}
	}

	gameID(fileGames) // –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ ID –∏–≥—Ä—ã - –ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª gamesID.txt

	regFolder := `SOFTWARE\ITKey\Esme`
	serverID = regGet(regFolder, "last_server") // –ø–æ–ª—É—á–∞–µ–º ID —Å–µ—Ä–≤–µ—Ä–∞
	regFolder += `\servers\` + serverID
	authToken = regGet(regFolder, "auth_token") // –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
	go validToken(regFolder, authToken)

	antiCheat(hostname, CheckAntiCheat) // –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Ç–∏—á–∏—Ç–æ–≤
	diskSpace(hostname, CheckFreeSpace) // –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–∞—Ö
	messageStartWin(hostname)           // –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞ —Å—Ç–∞–Ω—Ü–∏–∏
	go esmeCheck(hostname)              // –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–∏—Å–∞ –¥—Ä–æ–≤
	if checkIfProcessRunning("LibreHardwareMonitor.exe") && CheckTempON {
		go CheckHWt(hostname) // –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
	} else if !checkIfProcessRunning("LibreHardwareMonitor.exe") && CheckTempON {
		chatMessage := hostname + ". LibreHardwareMonitor –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ LibreHardwareMonitor"
		log.Println("LibreHardwareMonitor –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ LibreHardwareMonitor")
		_, err := SendMessage(BotToken, ServiceChatID, chatMessage, 0)
		if err != nil {
			log.Println("[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ", err, getLine())
		}
		for {
			if checkIfProcessRunning("LibreHardwareMonitor.exe") {
				log.Println("LibreHardwareMonitor –∑–∞–ø—É—â–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
				restart()
			}
			time.Sleep(10 * time.Second)
		}
	}

	if CommandON {
		go commandBot(BotToken, hostname, UserID)
	}
	var messageID int
	var chatMessage string
	for {
		for i := 0; i != 2; { //–∂–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ese.exe
			isRunning = checkIfProcessRunning("ese.exe") // –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
			if isRunning {
				log.Println("[INFO] –°—Ç–∞—Ä—Ç —Å–µ—Å—Å–∏–∏")
				chatMessage = sessionInfo("Start")
				if StartMessageON {
					messageID, err = SendMessage(BotToken, Chat_IDint, "<b>üü•</b>"+chatMessage, 0)
					if err != nil {
						log.Println("[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ", err, getLine())
					}
				}
				i = 2 //—Ç.–∫. –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
			}
			time.Sleep(5 * time.Second) // –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
		}
		// –∂–¥–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ ese.exe
		for i := 0; i != 3; {
			isRunning = checkIfProcessRunning("ese.exe")
			if !isRunning {
				log.Println("[INFO] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏")
				if StopMessageON {
					go GetComment("Stop", messageID, chatMessage)
				}
				if CommentMessageON {
					go GetComment("Comment", messageID, "")
				}
				antiCheat(hostname, CheckAntiCheat) // –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Ç–∏—á–∏—Ç–æ–≤
				diskSpace(hostname, CheckFreeSpace) // –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–∞—Ö
				if !OnlineIpInfo {
					if AutoUpdateGeolite { // –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –∞–≤—Ç–æ–∞–ø–¥–µ–π—Ç
						updateGeoLite(mmdbASN, mmdbCity) // –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ GeoLite
					}
				}

				i = 3 // –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
			}
			time.Sleep(5 * time.Second) // –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
		}
	}
}

// –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞ –≥–¥–µ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞
func getLine() string {
	_, _, line, _ := runtime.Caller(1)
	lineErr := fmt.Sprintf("\n–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ: %d", line)
	return lineErr
}

// –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä —Å –∏—Ö ID
func gameID(fileGames string) {
	// –û—Ç–ø—Ä–∞–≤–∏—Ç—å GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ API
	respGame, err := http.Get("https://services.drova.io/product-manager/product/listfull2")
	if err != nil {
		fmt.Println("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err, getLine())
		return
	}
	defer respGame.Body.Close()

	// –ü—Ä–æ—á–∏—Ç–∞—Ç—å JSON-–æ—Ç–≤–µ—Ç
	var products []Product
	err = json.NewDecoder(respGame.Body).Decode(&products)
	if err != nil {
		fmt.Println("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON-–æ—Ç–≤–µ—Ç–∞:", err, getLine())
		return
	}
	// –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏
	file, err := os.Create(fileGames)
	if err != nil {
		fmt.Println("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:", err, getLine())
		return
	}
	defer file.Close()

	// –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
	for _, product := range products {
		line := fmt.Sprintf("%s = %s\n", product.ProductID, product.Title)
		_, err = io.WriteString(file, line)
		if err != nil {
			fmt.Println("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª:", err, getLine())
			return
		}
	}
	time.Sleep(1 * time.Second)
}

// –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
func dateTimeS(data int64) (string, time.Time) {

	// –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
	seconds := int64(data / 1000)
	nanoseconds := int64((data % 1000) * 1000000)
	t := time.Unix(seconds, nanoseconds)

	// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
	formattedTime := t.Format("02-01-2006 15:04:05")

	return formattedTime, t
}

// –≤—ã—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
func dur(stopTime, startTime time.Time) (string, int) {
	var minutes int
	var sessionDur string
	if stopTime.String() != "" {
		duration := stopTime.Sub(startTime).Round(time.Second)
		// log.Println("[DIAG]duration - ", duration)
		hours := int(duration.Hours())
		// log.Println("[DIAG]hours - ", hours)
		minutes = int(duration.Minutes()) % 60
		// log.Println("[DIAG]minutes - ", minutes)
		seconds := int(duration.Seconds()) % 60
		// log.Println("[DIAG]seconds - ", seconds)
		hou := strconv.Itoa(hours)
		sessionDur = ""
		if hours < 10 {
			sessionDur = sessionDur + "0" + hou + ":"
		} else {
			sessionDur = sessionDur + hou + ":"
		}
		min := strconv.Itoa(minutes)
		if minutes < 10 {
			sessionDur = sessionDur + "0" + min + ":"
		} else {
			sessionDur = sessionDur + min + ":"
		}
		sec := strconv.Itoa(seconds)
		if seconds < 10 {
			sessionDur = sessionDur + "0" + sec
		} else {
			sessionDur = sessionDur + sec
		}
		if !ShortSessionON {
			if hours == 0 && minutes < minMinute {
				sessionDur = "off"
			}
		}

	} else {
		sessionDur = "[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏"
		log.Println(sessionDur)
	}
	return sessionDur, minutes
}

// offline –∏–Ω—Ñ–æ –ø–æ IP
func getASNRecord(mmdbCity, mmdbASN string, ip net.IP) (*CityRecord, *ASNRecord, error) {
	dbASN, err := maxminddb.Open(mmdbASN)
	if err != nil {
		return nil, nil, err
	}
	defer dbASN.Close()

	var recordASN ASNRecord
	err = dbASN.Lookup(ip, &recordASN)
	if err != nil {
		return nil, nil, err
	}

	db, err := maxminddb.Open(mmdbCity)
	if err != nil {
		return nil, nil, err
	}
	defer db.Close()

	var recordCity CityRecord
	err = db.Lookup(ip, &recordCity)
	if err != nil {
		return nil, nil, err
	}

	var Subdivision CityRecord
	err = db.Lookup(ip, &Subdivision)
	if err != nil {
		return nil, nil, err
	}
	return &recordCity, &recordASN, err
}

// –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ñ—Ñ–ª–∞–π–Ω –±–∞–∑—ã
func offlineDBip(ip string) string {
	var city, region, asn string = "", "", ""

	cityRecord, asnRecord, err := getASNRecord(mmdbCity, mmdbASN, net.ParseIP(ip))
	if err != nil {
		log.Println(err)
	}

	asn = asnRecord.AutonomousSystemOrganization // –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞
	if err != nil {
		log.Println(err, getLine())
		asn = ""
	}

	if val, ok := cityRecord.City.Names["ru"]; ok { // –≥–æ—Ä–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞
		city = val
		if err != nil {
			log.Println(err, getLine())
			city = ""
		}
	} else {
		if val, ok := cityRecord.City.Names["en"]; ok {
			city = val
			if err != nil {
				log.Println(err, getLine())
				city = ""
			}
		}
	}

	if len(cityRecord.Subdivision) > 0 {
		if val, ok := cityRecord.Subdivision[0].Names["ru"]; ok { // —Ä–µ–≥–∏–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞
			region = val
			if err != nil {
				log.Println(err, getLine())
				region = ""
			}
		} else {
			if val, ok := cityRecord.Subdivision[0].Names["en"]; ok {
				region = val
				if err != nil {
					log.Println(err, getLine())
					region = ""
				}
			}
		}
	}

	if city != "" {
		ipInfo = " - " + city
	}
	if region != "" {
		ipInfo += " - " + region
	}
	if asn != "" {
		ipInfo += " - " + asn
	}
	return ipInfo
}

// trial - —Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ –∫–ª—é—á—É(ip)
func createOrUpdateKeyValue(key string, value int) {
	data := readDataFromFile()
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–ª—é—á –≤ —Ñ–∞–π–ª–µ
	index := -1
	for i, line := range data {
		if strings.HasPrefix(line, key+"=") {
			index = i
			break
		}
	}
	// –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç(-1), –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å. –ò–Ω–∞—á–µ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ
	newValue := value
	if index != -1 {
		oldValue, _ := strconv.Atoi(strings.Split(data[index], "=")[1])
		newValue = oldValue + value
		data[index] = key + "=" + strconv.Itoa(newValue)
	} else {
		data = append(data, key+"="+strconv.Itoa(newValue))
	}
	writeDataToFile(data)
}

// trial - –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É(ip)
func getValueByKey(key string) int {
	data := readDataFromFile()
	for _, line := range data {
		parts := strings.Split(line, "=")
		if parts[0] == key {
			value, _ := strconv.Atoi(parts[1])
			return value
		}
	}
	return -1 // –í–æ–∑–≤—Ä–∞—â–∞–µ–º -1, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω
}

// trial - —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –∏ —Å–∑–¥–∞–µ–º —Å–ª–∞–π—Å
func readDataFromFile() []string {
	file, err := os.Open(trialfile)
	if err != nil {
		return []string{}
	}
	defer file.Close()

	var lines []string
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		lines = append(lines, scanner.Text())
	}

	return lines
}

// trial –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–ª–∞–π—Å –≤ —Ñ–∞–π–ª –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
func writeDataToFile(data []string) {
	file, err := os.OpenFile(trialfile, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0644)
	if err != nil {
		log.Println(err)
		return
	}
	defer file.Close()

	for _, line := range data {
		if _, err := file.WriteString(line + "\n"); err != nil {
			log.Println(err)
			return
		}
	}
}

// –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –≤ –≤–∏–¥–µ –∫–ª—é—á = –∑–Ω–∞—á–µ–Ω–∏–µ
func readConfig(keys, filename string) (string, error) {
	var gname string
	file, err := os.Open(filename)
	if err != nil {
		log.Println("[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞ ", filename, ": ", err, getLine())
		return "[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞: ", err
	}
	defer file.Close()

	// –°–æ–∑–¥–∞—Ç—å —Å–∫–∞–Ω–µ—Ä –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
	scanner := bufio.NewScanner(file)

	// –°–æ–∑–¥–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä—ã "–∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ"
	data := make(map[string]string)

	// –ü–µ—Ä–µ–±–∏—Ä–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
	for scanner.Scan() {
		line := scanner.Text()
		parts := strings.Split(line, " = ")
		if len(parts) == 2 {
			key := parts[0]
			value := parts[1]
			data[key] = value
		}
	}

	if value, ok := data[keys]; ok {
		gname = value
	}
	return gname, err
}

func getFromURL(url, cell, IDinCell string) (responseString string, err error) {
	_, err = http.Get("https://services.drova.io")
	if err != nil {
		log.Println("[ERROR] –°–∞–π—Ç https://services.drova.io –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
		return
	} else {
		// –°–æ–∑–¥–∞–Ω–∏–µ HTTP –∫–ª–∏–µ–Ω—Ç–∞
		client := &http.Client{}

		var resp *http.Response

		req, err := http.NewRequest("GET", url, nil)
		if err != nil {
			log.Println("[ERROR] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: ", err, getLine())
			return "", err
		}

		// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
		q := req.URL.Query()
		q.Add(cell, IDinCell)
		req.URL.RawQuery = q.Encode()

		// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Auth-Token
		req.Header.Set("X-Auth-Token", authToken)

		// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
		resp, err = client.Do(req)
		if err != nil {
			log.Println("[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: ", err, getLine())
			return "", err
		}
		defer resp.Body.Close()
		// –ó–∞–ø–∏—Å—å –æ—Ç–≤–µ—Ç–∞ –≤ —Å—Ç—Ä–æ–∫—É
		var buf bytes.Buffer
		_, err = io.Copy(&buf, resp.Body)
		if err != nil {
			log.Println("[ERROR] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ –±—É—Ñ—Ñ–µ—Ä: ", err, getLine())
			return "", err
		}

		responseString = buf.String()
	}

	return responseString, err
}

// –ø–æ–ª—É—á–∞–µ–º IP –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞
func getInterface() (localAddr, nameInterface string) {

	var localIP, maxInterfaceName, linkSpeed string
	var maxOutgoingSpeed float64
	interfaces, err := net.Interfaces()
	if err != nil {
		log.Printf("[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤. %s. %s\n", err, getLine())
	}

	maxInterfaceName, maxOutgoingSpeed = getSpeed()

	for _, interf := range interfaces {
		addrs, err := interf.Addrs()
		if err != nil {
			log.Printf("[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ip –∞–¥—Ä–µ—Å–æ–≤. %s. %s\n", err, getLine())
		}
		for _, add := range addrs {
			if ip, ok := add.(*net.IPNet); ok {
				localIP = ip.String()
			}
		}

		if interf.Name == maxInterfaceName {
			localAddr = localIP
			linkSpeed = getLinkSpeed(interf.Name)
		}
	}
	log.Printf("[INFO] –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –º–∞–∫—Å. –∏—Å—Ö. —Å–∫–æ—Ä–æ—Å—Ç—å—é: %s, IP: %s, —Å–∫–æ—Ä–æ—Å—Ç—å: %.0f –±–∞–π—Ç/—Å–µ–∫\n", maxInterfaceName, localAddr, maxOutgoingSpeed)
	return localAddr, maxInterfaceName + linkSpeed
}

// —Å–∫—Ä—ã—Ç—å\–æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ç–∞–Ω—Ü–∏—é
func viewStation(seeSt, serverID string) error {
	resp, err := http.Get("https://services.drova.io")
	if err != nil {
		fmt.Println("–°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
	} else {
		if resp.StatusCode == http.StatusOK {
			url := "https://services.drova.io/server-manager/servers/" + serverID + "/set_published/" + seeSt

			request, err := http.NewRequest("POST", url, nil)
			if err != nil {
				fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
				return err
			}

			request.Header.Set("X-Auth-Token", authToken) // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Auth-Token

			client := &http.Client{}
			response, err := client.Do(request)
			if err != nil {
				fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", err)
				return err
			}
			defer response.Body.Close()
		}
	}
	return err
}

func GetComment(status string, messageID int, infoSession string) {
	chatMessage := sessionInfo(status) // —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
	if status == "Comment" {
		if chatMessage != "" {
			_, err := SendMessage(BotToken, ServiceChatID, "<b>‚úçÔ∏è</b>"+chatMessage, 0) // –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
			if err != nil {
				log.Println("[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ", err, getLine())
			}
		}
	} else if chatMessage != "off" && chatMessage != "" {
		_, err := SendMessage(BotToken, Chat_IDint, "<b>üü©</b>"+infoSession+chatMessage, messageID) // –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
		if err != nil {
			log.Println("[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ", err, getLine())
		}
	}
}

// func restartService() {
// 	command := "\\Drova\\Streaming Service"
// 	cmd := exec.Command("schtasks", "/end", "/tn", command)
// 	err := cmd.Run()
// 	if err != nil {
// 		fmt.Println("[ERROR] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:", err)
// 		return
// 	}
// 	fmt.Println("–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
// 	time.Sleep(2 * time.Second)
// 	cmd = exec.Command("schtasks", "/run", "/tn", command)
// 	err = cmd.Run()
// 	if err != nil {
// 		fmt.Println("[ERROR] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:", err)
// 		return
// 	}
// 	fmt.Println("–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
// }

func statusServSession() (statusSession, statusServer string, public bool, err error) {
	responseStringServers, err := getFromURL(UrlServers, "uuid", serverID)
	if err != nil {
		chatMessage := hostname + " –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞"
		log.Println("[ERROR] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞")
		_, err := SendMessage(BotToken, ServiceChatID, chatMessage, 0) // –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
		if err != nil {
			log.Println("[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ", err, getLine())
		}
	} else {
		var serv serverManager                               // —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ serverManager
		json.Unmarshal([]byte(responseStringServers), &serv) // –¥–µ–∫–æ–¥–∏—Ä—É–µ–º JSON —Ñ–∞–π–ª

		var x, y int8 = 0, 0

		for range serv {
			if serv[x].Server_id == serverID {
				y = x
			}
			x++
		}

		responseStringSessions, err := getFromURL(UrlSessions, "server_id", serverID)
		if err != nil {
			chatMessage := hostname + "–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞"
			log.Println("[ERROR] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞")
			_, err := SendMessage(BotToken, ServiceChatID, chatMessage, 0) // –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
			if err != nil {
				log.Println("[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ", err, getLine())
			}
		} else {
			var data SessionsData                                 // —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ SessionsData
			json.Unmarshal([]byte(responseStringSessions), &data) // –¥–µ–∫–æ–¥–∏—Ä—É–µ–º JSON —Ñ–∞–π–ª
			statusSession = data.Sessions[0].Status
			statusServer = serv[y].Status
			public = serv[y].Public
		}
	}
	return statusSession, statusServer, public, err
}

func delayReboot(n int) {
	for {
		statusSession, statusServer, _, err := statusServSession()
		if err != nil {
			log.Println("[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤: ", err, getLine())
		} else {
			var i int
			if statusSession != "ACTIVE" {
				chatMessage := fmt.Sprintf("–°—Ç–∞–Ω—Ü–∏—è %s %s\n", hostname, statusServer)
				chatMessage += fmt.Sprintf("–°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏ - %s", statusSession)
				_, err := SendMessage(BotToken, ServiceChatID, chatMessage, 0) // –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
				if err != nil {
					log.Println("[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ", err, getLine())
				}
				for i = 0; i <= n; i++ {
					_, statusServer, _, err := statusServSession()
					if err != nil {
						log.Println("[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤: ", err, getLine())
					} else {
						if (statusServer == "OFFLINE" && i == n) || n == 0 {
							chatMessage := fmt.Sprintf("–°—Ç–∞–Ω—Ü–∏—è %s –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É", hostname)
							_, err := SendMessage(BotToken, ServiceChatID, chatMessage, 0) // –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
							if err != nil {
								log.Println("[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ", err, getLine())
							}
							time.Sleep(1 * time.Minute)
							log.Println("[INFO] –°—Ç–∞–Ω—Ü–∏—è offline, —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ä–≤–µ—Ä")
							rebootPC()
						} else if statusServer != "OFFLINE" {
							i = n + 1
						}
					}
					time.Sleep(1 * time.Minute)
				}
				if i > n {
					break
				}
			}
		}
		time.Sleep(1 * time.Minute)
	}
}

func drovaService(command string) (err error) {
	path := "\\Drova\\Streaming Service"
	if command == "stop" {
		cmd := exec.Command("schtasks", "/end", "/tn", path)
		err = cmd.Run()
		if err != nil {
			fmt.Println("[ERROR] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:", err)
			return
		}
		log.Println("–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
	}

	if command == "start" {
		cmd := exec.Command("schtasks", "/run", "/tn", path)
		err = cmd.Run()
		if err != nil {
			fmt.Println("[ERROR] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:", err)
			return
		}
		log.Println("–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
	}
	return
}
